{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport seeds from '../assets/sorting_hat.json';\nimport QuestionComponent from '../components/QuestionComponent.vue';\nimport AnswerComponent from '../components/AnswerComponent.vue';\nexport default {\n  name: 'SelectionChat',\n  components: {\n    QuestionComponent,\n    AnswerComponent\n  },\n  mounted() {\n    this.questions.push(seeds[0]);\n  },\n  data() {\n    return {\n      questionsList: seeds,\n      questionIndex: 0,\n      questions: [],\n      answer: '',\n      selectedAnswer: [],\n      scores: undefined,\n      houses: {\n        g: 0,\n        h: 0,\n        r: 0,\n        s: 0\n      }\n    };\n  },\n  methods: {\n    onEnter() {\n      const actualQuestion = this.questionsList[this.questionIndex];\n      actualQuestion.answers.forEach(answer => {\n        let testAnswer = answer.title.toLowerCase().replace(/\\s/g, '');\n        let userAnswer = this.answer.toLowerCase().replace(/\\s/g, '');\n        console.log('-------------------------------------------');\n        console.log(testAnswer);\n        console.log('-------------------------------------------');\n        console.log('-------------------------------------------');\n        console.log(userAnswer);\n        console.log('-------------------------------------------');\n        console.log(testAnswer == userAnswer);\n        if (testAnswer === userAnswer) {\n          this.scores = answer.scores;\n          this.selectedAnswer.push(this.answer);\n          this.answer = '';\n          this.houses.g += this.scores.g;\n          this.houses.h += this.scores.h;\n          this.houses.r += this.scores.r;\n          this.houses.s += this.scores.s;\n          this.questionIndex++;\n          if (this.questionsList.length !== this.questionIndex) {\n            this.questions.push(this.questionsList[this.questionIndex]);\n          } else {\n            this.showResults();\n          }\n          return;\n        } else {\n          return '';\n        }\n\n        //console.log(this.questionsList.length)\n        //this.scrollToElement()\n      });\n    },\n\n    showResults() {\n      console.log(this.houses);\n    },\n    scrollToElement() {\n      const el = document.getElementById(\"input-container\");\n      //console.log(el)\n      if (el) {\n        // Use el.scrollIntoView() to instantly scroll to the element\n        el.scrollIntoView({\n          block: 'center'\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["seeds","QuestionComponent","AnswerComponent","name","components","mounted","questions","push","data","questionsList","questionIndex","answer","selectedAnswer","scores","undefined","houses","g","h","r","s","methods","onEnter","actualQuestion","answers","forEach","testAnswer","title","toLowerCase","replace","userAnswer","console","log","length","showResults","scrollToElement","el","document","getElementById","scrollIntoView","block"],"sources":["src/views/SelectionChat.vue"],"sourcesContent":["<template>\n  <el-col class=\"selection-chat-container\">\n    <el-row class=\"chat-container\" ref=\"chatContainer\" v-for=\"(question, index) in questions\" :key=\"question.title\">\n      <QuestionComponent :question=\"question\"/>\n      <AnswerComponent v-if=\"selectedAnswer[index] !== undefined\" :answer=\"selectedAnswer[index]\" />\n    </el-row>\n    <el-row class=\"answer-input-container\" id=\"input-container\">\n      <el-input\n        class=\"answer-input\"\n        placeholder=\"\"\n        suffix-icon=\"el-icon-position\"\n        v-model=\"answer\"\n        @change=\"onEnter\">\n      </el-input>\n    </el-row>\n  </el-col>\n</template>\n\n<script>\nimport seeds from '../assets/sorting_hat.json'\nimport QuestionComponent from '../components/QuestionComponent.vue'\nimport AnswerComponent from '../components/AnswerComponent.vue'\n\nexport default {\n  name: 'SelectionChat',\n  components: {\n    QuestionComponent,\n    AnswerComponent\n  },\n  mounted() {\n    this.questions.push(seeds[0])\n  },\n  data () {\n    return {\n      questionsList: seeds,\n      questionIndex: 0,\n      questions: [],\n      answer: '',\n      selectedAnswer: [],\n      scores: undefined,\n      houses: {\n        g: 0,\n        h: 0,\n        r: 0,\n        s: 0\n      }\n    }\n  },\n  methods: {\n    onEnter() {\n      const actualQuestion = this.questionsList[this.questionIndex]\n      actualQuestion.answers.forEach(answer => {\n        let testAnswer = answer.title.toLowerCase().replace(/\\s/g, '')\n        let userAnswer = this.answer.toLowerCase().replace(/\\s/g, '')\n        console.log('-------------------------------------------')\n        console.log(testAnswer)\n        console.log('-------------------------------------------')\n        console.log('-------------------------------------------')\n        console.log(userAnswer)\n        console.log('-------------------------------------------')\n        console.log(testAnswer == userAnswer)\n        if (testAnswer === userAnswer) {\n          this.scores = answer.scores\n          this.selectedAnswer.push(this.answer)\n          this.answer = ''\n          this.houses.g += this.scores.g\n          this.houses.h += this.scores.h\n          this.houses.r += this.scores.r\n          this.houses.s += this.scores.s\n\n          this.questionIndex++\n          if (this.questionsList.length !== this.questionIndex) {\n            this.questions.push(this.questionsList[this.questionIndex])\n          }  else {\n            this.showResults()\n          }\n          return\n        } else {\n          return ''\n        }\n\n        //console.log(this.questionsList.length)\n        //this.scrollToElement()\n      })\n    },\n    showResults() {\n      console.log(this.houses)\n    },\n    scrollToElement() {\n      const el = document.getElementById(\"input-container\");\n      //console.log(el)\n      if (el) {\n        // Use el.scrollIntoView() to instantly scroll to the element\n        el.scrollIntoView({block: 'center'});\n      }\n    },\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.answer-input-container {\n  display: flex;\n  justify-content: flex-start;\n}\n\n.answer-input {\n  width: 40%;\n  margin: 5px\n}\n</style>"],"mappings":";AAmBA,OAAAA,KAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,eAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,iBAAA;IACAC;EACA;EACAG,QAAA;IACA,KAAAC,SAAA,CAAAC,IAAA,CAAAP,KAAA;EACA;EACAQ,KAAA;IACA;MACAC,aAAA,EAAAT,KAAA;MACAU,aAAA;MACAJ,SAAA;MACAK,MAAA;MACAC,cAAA;MACAC,MAAA,EAAAC,SAAA;MACAC,MAAA;QACAC,CAAA;QACAC,CAAA;QACAC,CAAA;QACAC,CAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,QAAA;MACA,MAAAC,cAAA,QAAAb,aAAA,MAAAC,aAAA;MACAY,cAAA,CAAAC,OAAA,CAAAC,OAAA,CAAAb,MAAA;QACA,IAAAc,UAAA,GAAAd,MAAA,CAAAe,KAAA,CAAAC,WAAA,GAAAC,OAAA;QACA,IAAAC,UAAA,QAAAlB,MAAA,CAAAgB,WAAA,GAAAC,OAAA;QACAE,OAAA,CAAAC,GAAA;QACAD,OAAA,CAAAC,GAAA,CAAAN,UAAA;QACAK,OAAA,CAAAC,GAAA;QACAD,OAAA,CAAAC,GAAA;QACAD,OAAA,CAAAC,GAAA,CAAAF,UAAA;QACAC,OAAA,CAAAC,GAAA;QACAD,OAAA,CAAAC,GAAA,CAAAN,UAAA,IAAAI,UAAA;QACA,IAAAJ,UAAA,KAAAI,UAAA;UACA,KAAAhB,MAAA,GAAAF,MAAA,CAAAE,MAAA;UACA,KAAAD,cAAA,CAAAL,IAAA,MAAAI,MAAA;UACA,KAAAA,MAAA;UACA,KAAAI,MAAA,CAAAC,CAAA,SAAAH,MAAA,CAAAG,CAAA;UACA,KAAAD,MAAA,CAAAE,CAAA,SAAAJ,MAAA,CAAAI,CAAA;UACA,KAAAF,MAAA,CAAAG,CAAA,SAAAL,MAAA,CAAAK,CAAA;UACA,KAAAH,MAAA,CAAAI,CAAA,SAAAN,MAAA,CAAAM,CAAA;UAEA,KAAAT,aAAA;UACA,SAAAD,aAAA,CAAAuB,MAAA,UAAAtB,aAAA;YACA,KAAAJ,SAAA,CAAAC,IAAA,MAAAE,aAAA,MAAAC,aAAA;UACA;YACA,KAAAuB,WAAA;UACA;UACA;QACA;UACA;QACA;;QAEA;QACA;MACA;IACA;;IACAA,YAAA;MACAH,OAAA,CAAAC,GAAA,MAAAhB,MAAA;IACA;IACAmB,gBAAA;MACA,MAAAC,EAAA,GAAAC,QAAA,CAAAC,cAAA;MACA;MACA,IAAAF,EAAA;QACA;QACAA,EAAA,CAAAG,cAAA;UAAAC,KAAA;QAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}